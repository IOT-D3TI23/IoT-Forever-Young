# -*- coding: utf-8 -*-
"""IoT Forever Young.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DT5_JrrJ7o1_76F5tXTom5NkbgthW2bR
"""

pip install roboflow supervision opencv-python-headless matplotlib pillow

# Import library yang akan digunakan
from roboflow import Roboflow
import cv2
import matplotlib.pyplot as plt
from google.colab import files
import numpy as np

# Inisialisasi API
API_KEY = "FjAROwNWlSvKhj3PBvla"
PROJECT_NAME = "trash-ftkfj"
MODEL_VERSION = 1

rf = Roboflow(api_key=API_KEY)
project = rf.workspace().project(PROJECT_NAME)
model = project.version(MODEL_VERSION).model

def upload_and_predict():
    """
    Meminta pengguna mengunggah gambar, memproses gambar menggunakan model,
    dan menampilkan hasil prediksi.
    """

    def upload_file():
        """Meminta pengguna untuk mengunggah file dan mengembalikan nama file."""
        print("Harap unggah gambar:")
        uploaded_files = files.upload()
        return next(iter(uploaded_files))  # Ambil nama file pertama

    def read_and_predict(image_path, model):
        """Membaca gambar dari path dan menghasilkan prediksi dari model."""
        print("Memproses gambar...")
        img = cv2.imread(image_path)
        predictions = model.predict(image_path, confidence=50).json()
        return img, predictions

    def annotate_image(image, predictions):
        """
        Menambahkan anotasi pada gambar berdasarkan prediksi.
        Menggambar bounding box, label, dan mask (jika ada).
        """
        for pred in predictions:
            # Koordinat untuk bounding box
            x_start = int(pred['x'] - pred['width'] / 2)
            y_start = int(pred['y'] - pred['height'] / 2)
            x_end = int(pred['x'] + pred['width'] / 2)
            y_end = int(pred['y'] + pred['height'] / 2)

            # Tambahkan mask ke gambar
            if 'mask' in pred:
                mask = np.array(pred['mask'], dtype=np.uint8)
                mask_resized = cv2.resize(mask, (int(pred['width']), int(pred['height'])))
                mask_coords = np.where(mask_resized > 0)
                image[y_start + mask_coords[0], x_start + mask_coords[1]] = (0, 255, 255)

            # Tambahkan kotak dan label
            cv2.rectangle(image, (x_start, y_start), (x_end, y_end), (0, 255, 0), 2)
            label_text = f"{pred['class']} ({pred['confidence'] * 100:.1f}%)"
            cv2.putText(image, label_text, (x_start, y_start - 5),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

    def show_image_with_annotations(image):
        """Menampilkan gambar yang telah diberikan anotasi."""
        plt.figure(figsize=(10, 10))
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        plt.axis("off")
        plt.title("Prediksi Gambar")
        plt.show()

    # Proses utama
    file_path = upload_file()
    loaded_image, prediction_results = read_and_predict(file_path, model)
    annotate_image(loaded_image, prediction_results['predictions'])
    show_image_with_annotations(loaded_image)

# Eksekusi fungsi
upload_and_predict()